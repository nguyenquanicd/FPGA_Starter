/******************************************************************************
*
* Copyright (C) 2010 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/
/*****************************************************************************/
/**
*
* @file		xuartps_hello_world_example.c
*
* This file contains a design example using the XUartPs driver in polled mode
*
* The example uses the default setting in the XUartPs driver:
*	. baud rate 9600
*	. 8 bit data
*	. 1 stop bit
*	. no parity
*
* @note
* This example requires an external SchmartModule connected to the pins for
* the device to display the 'Hello World' message onto a hyper-terminal.
*
* MODIFICATION HISTORY:
* <pre>
* Ver   Who    Date     Changes
* ----- ------ -------- -------------------------------------------------
* 1.00a drg/jz 01/13/10 First Release
* 1.04a  hk    22/04/13 Changed the baud rate in the example to 115200.
*				Fix for CR#707879
* 3.4    ms    01/23/17 Added xil_printf statement in main function to
*                       ensure that "Successfully ran" and "Failed" strings
*                       are available in all examples. This is a fix for
*                       CR-965028.
*
* </pre>
******************************************************************************/

/***************************** Include Files *********************************/

#include "xparameters.h"
#include "xuartps.h"
#include "xil_printf.h"
#include "xiic.h"
/************************** Constant Definitions *****************************/

/*
 * The following constants map to the XPAR parameters created in the
 * xparameters.h file. They are defined here such that a user can easily
 * change all the needed parameters in one place.
 */

#define IIC_BASE_ADDRESS				XPAR_IIC_0_BASEADDR
// register ov7670 definition
#define OV7670_SLAVE_BASE_ADDRESS 0x21
#define OV7670_SLAVE_RESET_REG 0x12
// sub_register
#define ProductIdRegMSB 0xA
#define ProductIdRegLSB 0xB
#define GainReg 0x0

u8 Ov7670RegCongAddressArray[] = {
		0b0000000000,
		0b0000000001,
		0b0000000010,
		0b0000000011,
		0b0000000100,
		0b0000000101,
		0b0000000110,
		0b0000000111,
		0b0000001000,
		0b0000001001,
		0b0000001010,
		0b0000001011,
		0b0000001100,
		0b0000001101,
		0b0000001110,
		0b0000001111,
		0b0000010000,
		0b0000010001,
		0b0000010010,
		0b0000010011,
		0b0000010100,
		0b0000010101,
		0b0000010110,
		0b0000010111,
		0b0000011000,
		0b0000011001,
		0b0000011010,
		0b0000011011,
		0b0000011100,
		0b0000011101,
		0b0000011110,
		0b0000011111,
		0b0000100000,
		0b0000100001,
		0b0000100010,
		0b0000100011,
		0b0000100100,
		0b0000100101,
		0b0000100110,
		0b0000100111,
		0b0000101000,
		0b0000101001,
		0b0000101010,
		0b0000101011,
		0b0000101100,
		0b0000101101,
		0b0000101110,
		0b0000101111,
		0b0000110000,
		0b0000110001,
		0b0000110010,
		0b0000110011,
		0b0000110100,
		0b0000110101,
		0b0000110110,
		0b0000110111,
		0b0000111000,
		0b0000111001,
		0b0000111010,
		0b0000111011,
		0b0000111100,
		0b0000111101,
		0b0000111110,
		0b0000111111,
		0b0001000000,
		0b0001000001,
		0b0001000010,
		0b0001000011,
		0b0001000100,
		0b0001000101,
		0b0001000110,
		0b0001000111,
		0b0001001000,
		0b0001001001,
		0b0001001010,
		0b0001001011,
		0b0001001100,
		0b0001001101,
		0b0001001110,
		0b0001001111,
		0b0001010000,
		0b0001010001,
		0b0001010010,
		0b0001010011,
		0b0001010100,
		0b0001010101,
		0b0001010110,
		0b0001010111,
		0b0001011000,
		0b0001011001,
		0b0001011010,
		0b0001011011,
		0b0001011100,
		0b0001011101,
		0b0001011110,
		0b0001011111,
		0b0001100000,
		0b0001100001,
		0b0001100010,
		0b0001100011,
		0b0001100100,
		0b0001100101,
		0b0001100110,
		0b0001100111,
		0b0001101000,
		0b0001101001,
		0b0001101010,
		0b0001101011,
		0b0001101100,
		0b0001101101,
		0b0001101110,
		0b0001101111,
		0b0001110000,
		0b0001110001,
		0b0001110010,
		0b0001110011,
		0b0001110100,
		0b0001110101,
		0b0001110110,
		0b0001110111,
		0b0001111000,
		0b0001111001,
		0b0001111010,
		0b0001111011,
		0b0001111100,
		0b0001111101,
		0b0001111110,
		0b0001111111,
		0b0010000000,
		0b0010000001,
		0b0010000010,
		0b0010000011,
		0b0010000100,
		0b0010000101,
		0b0010000110,
		0b0010000111,
		0b0010001000,
		0b0010001001,
		0b0010001010,
		0b0010001011,
		0b0010001100,
		0b0010001101,
		0b0010001110,
		0b0010001111,
		0b0010010000,
		0b0010010001,
		0b0010010010,
		0b0010010011,
		0b0010010100,
		0b0010010101,
		0b0010010110,
		0b0010010111,
		0b0010011000,
		0b0010011001,
		0b0010011010,
		0b0010011011,
		0b0010011100,
		0b0010011101,
		0b0010011110,
		0b0010011111,
		0b0010100000,
		0b0010100001,
		0b0010100010,
		0b0010100011,
		0b0010100100,
		0b0010100101,
		0b0010100110,
		0b0010100111,
		0b0010101000,
		0b0010101001,
		0b0010101010,
		0b0010101011,
		0b0010101100,
		0b0010101101,
		0b0010101110,
		0b0010101111,
		0b0010110000,
		0b0010110001,
		0b0010110010,
		0b0010110011,
		0b0010110100,
		0b0010110101,
		0b0010110110,
		0b0010110111,
		0b0010111000,
		0b0010111001,
		0b0010111010,
		0b0010111011,
		0b0010111100,
		0b0010111101,
		0b0010111110,
		0b0010111111,
		0b0011000000,
		0b0011000001,
		0b0011000010,
		0b0011000011,
		0b0011000100,
		0b0011000101,
		0b0011000110,
		0b0011000111,
		0b0011001000,
		0b0011001001,
		0b0011001010,
		0b0011001011,
		0b0011001100,
		0b0011001101,
		0b0011001110,
		0b0011001111,
		0b0011010000,
		0b0011010001,
		0b0011010010,
		0b0011010011,
		0b0011010100,
		0b0011010101,
		0b0011010110,
		0b0011010111,
		0b0011011000,
		0b0011011001,
		0b0011011010,
		0b0011011011,
		0b0011011100,
		0b0011011101,
		0b0011011110,
		0b0011011111,
		0b0011100000,
		0b0011100001,
		0b0011100010
};

u8 Ov7670RegCongDataArray[] = {
		0b011100100,
		0b101000010,
		0b100010010,
		0b110000000,
		0b011111111,
		0b011101001,
		0b101000010,
		0b100010010,
		0b100000100,
		0b011111111,
		0b101000010,
		0b100010001,
		0b100000000,
		0b011111111,
		0b101000010,
		0b100001100,
		0b100000000,
		0b011111111,
		0b101000010,
		0b100111110,
		0b100000000,
		0b011111111,
		0b101000010,
		0b110001100,
		0b100000000,
		0b011111111,
		0b101000010,
		0b100000100,
		0b100000000,
		0b011111111,
		0b101000010,
		0b101000000,
		0b100010000,
		0b011111111,
		0b101000010,
		0b100111010,
		0b100000100,
		0b011111111,
		0b101000010,
		0b100010100,
		0b100111000,
		0b011111111,
		0b101000010,
		0b101001111,
		0b101000000,
		0b011111111,
		0b101000010,
		0b101010000,
		0b100110100,
		0b011111111,
		0b101000010,
		0b101010001,
		0b100001100,
		0b011111111,
		0b101000010,
		0b101010010,
		0b100010111,
		0b011111111,
		0b101000010,
		0b101010011,
		0b100101001,
		0b011111111,
		0b101000010,
		0b101010100,
		0b101000000,
		0b011111111,
		0b101000010,
		0b101011000,
		0b100011110,
		0b011111111,
		0b101000010,
		0b100111101,
		0b111000000,
		0b011111111,
		0b101000010,
		0b100010001,
		0b100000000,
		0b011111111,
		0b101000010,
		0b100010111,
		0b100010001,
		0b011111111,
		0b101000010,
		0b100011000,
		0b101100001,
		0b011111111,
		0b101000010,
		0b100110010,
		0b110100100,
		0b011111111,
		0b101000010,
		0b100011001,
		0b100000011,
		0b011111111,
		0b101000010,
		0b100011010,
		0b101111011,
		0b011111111,
		0b101000010,
		0b100000011,
		0b100001010,
		0b011111111,
		0b101000010,
		0b100001110,
		0b101100001,
		0b011111111,
		0b101000010,
		0b100001111,
		0b101001011,
		0b011111111,
		0b101000010,
		0b100010110,
		0b100000010,
		0b011111111,
		0b101000010,
		0b100011110,
		0b100110111,
		0b011111111,
		0b101000010,
		0b100100001,
		0b100000010,
		0b011111111,
		0b101000010,
		0b100100010,
		0b110010001,
		0b011111111,
		0b101000010,
		0b100101001,
		0b100000111,
		0b011111111,
		0b101000010,
		0b100110011,
		0b100001011,
		0b011111111,
		0b101000010,
		0b100110101,
		0b100001011,
		0b011111111,
		0b101000010,
		0b100110111,
		0b100011101,
		0b011111111,
		0b101000010,
		0b100111000,
		0b101110001,
		0b011111111,
		0b101000010,
		0b100111001,
		0b100101010,
		0b011111111,
		0b101000010,
		0b100111100,
		0b101111000,
		0b011111111,
		0b101000010,
		0b101001101,
		0b101000000,
		0b011111111,
		0b101000010,
		0b101001110,
		0b100100000,
		0b011111111,
		0b101000010,
		0b101101001,
		0b100000000,
		0b011111111,
		0b101000010,
		0b101101011,
		0b101001010,
		0b011111111,
		0b101000010,
		0b101110100,
		0b100010000,
		0b011111111,
		0b101000010,
		0b110001101,
		0b101001111,
		0b011111111,
		0b101000010,
		0b110001110,
		0b100000000,
		0b011111111,
		0b101000010,
		0b110001111,
		0b100000000,
		0b011111111,
		0b101000010,
		0b110010000,
		0b100000000,
		0b011111111,
		0b101000010,
		0b110010001,
		0b100000000,
		0b011111111,
		0b101000010,
		0b110010110,
		0b100000000,
		0b011111111,
		0b101000010,
		0b110011010,
		0b100000000,
		0b011111111,
		0b101000010,
		0b110110000,
		0b110000100,
		0b011111111,
		0b101000010,
		0b110110001,
		0b100001100,
		0b011111111,
		0b101000010,
		0b110110010,
		0b100001110,
		0b011111111,
		0b101000010,
		0b110110011,
		0b110000010,
		0b011111111,
		0b101000010,
		0b110111000,
		0b100001010,
		0b011111111,
		0b011111110,
		0b011111110,
		0b010000000,
		0b000000000,
		0b000011100
};
//

int ByteCount;
u8 send_byte;
u8 write_data [256];
u8 read_data [256];

// iic function read

uint8_t ov7670_ReadReg(u8 Reg, u8 *Bufp, u16 len)
{
	write_data[0] = Reg;
	ByteCount = XIic_Send(IIC_BASE_ADDRESS, OV7670_SLAVE_BASE_ADDRESS, (u8*)&write_data, 1, XIIC_STOP);
	ByteCount = XIic_Recv(IIC_BASE_ADDRESS, OV7670_SLAVE_BASE_ADDRESS, (u8*)Bufp, len, XIIC_STOP);
	return(ByteCount);
}

uint8_t Ov7670_WriteReg(u8 Reg, u8 *BufData, u16 len){
	write_data[0] = Reg;
	for (ByteCount = 1;ByteCount <= len; ByteCount++)
	{
		write_data[ByteCount] = BufData[ByteCount-1];
	}
	ByteCount = XIic_Send(IIC_BASE_ADDRESS, OV7670_SLAVE_BASE_ADDRESS, &write_data[0], (len+1), XIIC_STOP);
	return(ByteCount);
}

/*****************************************************************************/
/**
*
* Main function to call the Hello World example.
*
* @param	None
*
* @return
*		- XST_FAILURE if the Test Failed .
*		- A non-negative number indicating the number of characters
*		  sent.
*
* @note		None
*
******************************************************************************/
int main(void)
{
	u16 productValue = 0;
	u8 regInfo = 0;
	int Status = 0;
	u8 sendData = 0;
	// Reset register
	sendData = 0x1;
	Ov7670_WriteReg(OV7670_SLAVE_RESET_REG,&sendData,1);
	xil_printf("Reset register \r\n");
	// Read
	regInfo = 0x0;
	ov7670_ReadReg(ProductIdRegMSB,&regInfo,1);
	xil_printf("ProductIdRegMSB: 0x%x \r\n",regInfo);
	productValue = regInfo;
	regInfo = 0x0;
	ov7670_ReadReg(ProductIdRegLSB,&regInfo,1);
	xil_printf("ProductIdRegLSB: 0x%x \r\n",regInfo);
	productValue = (productValue << 8) | regInfo;
	//XIic_Recv(IIC_BASE_ADDRESS, OV7670_SLAVE_BASE_ADDRESS, &regInfo, 1, XIIC_STOP);
	xil_printf("Product reg valuexx: 0x%x \r\n",productValue);
	if (productValue != 0x7673){
		xil_printf("[Error] Fail to read/write register of ov76xx camera\r\n");
	}
	// test to read/write
	sendData = 0xA5;
	regInfo = 0x0;
	Ov7670_WriteReg(GainReg,&sendData,1);
	ov7670_ReadReg(GainReg,&regInfo,1);
	xil_printf("GainReg reg valuexx: 0x%x \r\n",regInfo);
	return Status;
}

